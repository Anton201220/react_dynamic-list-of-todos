{"version":3,"sources":["components/TodoList/TodoList.tsx","types/Filter.ts","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","services/Filtration.ts","App.tsx","index.tsx"],"names":["TodoList","todos","onShowModal","selectedTodoId","className","map","todo","id","completed","classNames","title","type","onClick","FilterType","TodoFilter","filter","onFilterChange","searchQuery","onSearchChange","onClearSearch","value","onChange","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","onCloseModal","useState","loadingUser","setLoadingUser","user","setUser","userId","useEffect","getUser","participant","catch","href","email","name","filterTodosBySearchQuery","toLowerCase","includes","trim","filterActiveOrCompletedTodosBySearchQuery","App","loading","setLoading","setTodos","selectedTodo","setSelectedTodo","filteredTodos","setFilteredTodos","setFilter","setSearchQuery","todosList","filtered","e","target","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3d6df20b.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todos: Todo[];\n  onShowModal: (todo: Todo) => void;\n  selectedTodoId: number | undefined,\n}\n\nexport const TodoList: React.FC <Props> = ({\n  todos,\n  onShowModal,\n  selectedTodoId,\n}) => (\n\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(todo => (\n        <tr\n          data-cy=\"todo\"\n          className=\"\"\n          key={todo.id}\n        >\n          <td className=\"is-vcentered\">\n            {todo.id}\n          </td>\n\n          {todo.completed ? (\n            <>\n              <td className=\"is-vcentered\">\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </td>\n            </>\n          ) : (\n            <td className=\"is-vcentered\" />\n          )}\n\n          <td className=\"is-vcentered is-expanded\">\n            <p className={classNames({\n              'has-text-success': todo.completed,\n              'has-text-danger': !todo.completed,\n            })}\n            >\n              {todo.title}\n            </p>\n          </td>\n\n          <td className=\"has-text-right is-vcentered\">\n            <button\n              data-cy=\"selectButton\"\n              className=\"button\"\n              type=\"button\"\n              onClick={() => onShowModal(todo)}\n            >\n              <span className=\"icon\">\n                {selectedTodoId === todo.id ? (\n                  <i className=\"far fa-eye-slash\" />\n                ) : (\n                  <i className=\"far fa-eye\" />\n                )}\n              </span>\n            </button>\n          </td>\n        </tr>\n      ))}\n    </tbody>\n  </table>\n);\n","export const FilterType = {\n  ALL: 'all',\n  COMPLETED: 'completed',\n  ACTIVE: 'active',\n};\n","import React from 'react';\nimport { FilterType } from '../../types/Filter';\n\ninterface Props {\n  filter: string;\n  onFilterChange: (e: React.ChangeEvent<HTMLSelectElement>) => void;\n  searchQuery: string;\n  onSearchChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  onClearSearch: () => void;\n}\n\nexport const TodoFilter: React.FC <Props> = ({\n  filter,\n  onFilterChange,\n  searchQuery,\n  onSearchChange,\n  onClearSearch,\n}) => (\n  <form className=\"field has-addons\">\n    <p className=\"control\">\n      <span className=\"select\">\n        <select\n          data-cy=\"statusSelect\"\n          value={filter}\n          onChange={onFilterChange}\n        >\n          <option value={FilterType.ALL}>All</option>\n          <option value={FilterType.ACTIVE}>Active</option>\n          <option value={FilterType.COMPLETED}>Completed</option>\n        </select>\n      </span>\n    </p>\n\n    <p className=\"control is-expanded has-icons-left has-icons-right\">\n      <input\n        data-cy=\"searchInput\"\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Search...\"\n        value={searchQuery}\n        onChange={onSearchChange}\n      />\n      <span className=\"icon is-left\">\n        <i className=\"fas fa-magnifying-glass\" />\n      </span>\n\n      {searchQuery && (\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          <button\n            data-cy=\"clearSearchButton\"\n            aria-label=\"Clear search\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={onClearSearch}\n          />\n        </span>\n      )}\n    </p>\n  </form>\n);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useState, useEffect } from 'react';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\n\ninterface Props {\n  todo: Todo;\n  onCloseModal: () => void;\n}\n\nexport const TodoModal: React.FC <Props> = ({\n  todo,\n  onCloseModal,\n}) => {\n  const [loadingUser, setLoadingUser] = useState(true);\n  const [user, setUser] = useState<User | null>(null);\n\n  const {\n    id, title, completed, userId,\n  } = todo;\n\n  useEffect(() => {\n    setLoadingUser(true);\n    getUser(userId)\n      .then(participant => {\n        setUser(participant);\n        setLoadingUser(false);\n      })\n      .catch(() => {\n        setLoadingUser(false);\n      });\n  }, [userId]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {loadingUser ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              aria-label=\"Cloase window\"\n              onClick={onCloseModal}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n              {' by '}\n\n              <a href={`mailto:${user?.email}`}>\n                {user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { Todo } from '../types/Todo';\n\nexport const filterTodosBySearchQuery\n= (todos: Todo[], searchQuery: string) => {\n  return todos.filter(\n    todo => todo.title.toLowerCase().includes(searchQuery.trim().toLowerCase()),\n  );\n};\n\nexport const filterActiveOrCompletedTodosBySearchQuery\n= (todos: Todo[], searchQuery: string, completed: boolean) => {\n  return todos.filter(\n    todo => todo.completed === completed && todo.title.toLowerCase()\n      .includes(searchQuery.trim().toLowerCase()),\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useState, useEffect } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\nimport { FilterType } from './types/Filter';\nimport { filterActiveOrCompletedTodosBySearchQuery, filterTodosBySearchQuery } from './services/Filtration';\n\nexport const App: React.FC = () => {\n  const [loading, setLoading] = useState(false);\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [filteredTodos, setFilteredTodos] = useState<Todo[]>([]);\n  const [filter, setFilter] = useState<string>('all');\n  const [searchQuery, setSearchQuery] = useState<string>('');\n\n  useEffect(() => {\n    setLoading(true);\n    getTodos().then((todosList) => {\n      setTodos(todosList);\n      setFilteredTodos(todosList);\n      setLoading(false);\n    });\n  }, []);\n\n  useEffect(() => {\n    let filtered;\n\n    if (searchQuery === '') {\n      switch (filter) {\n        case FilterType.ALL:\n          filtered = todos;\n          break;\n\n        case FilterType.COMPLETED:\n          filtered = todos.filter(todo => todo.completed);\n          break;\n\n        case FilterType.ACTIVE:\n          filtered = todos.filter(todo => !todo.completed);\n          break;\n\n        default:\n          filtered = todos;\n          break;\n      }\n    } else {\n      switch (filter) {\n        case FilterType.ALL:\n          filtered = filterTodosBySearchQuery(todos, searchQuery);\n          break;\n\n        case FilterType.COMPLETED:\n          filtered = filterActiveOrCompletedTodosBySearchQuery(todos, searchQuery, true);\n          break;\n\n        case FilterType.ACTIVE:\n          filtered = filterActiveOrCompletedTodosBySearchQuery(todos, searchQuery, false);\n          break;\n\n        default:\n          filtered = filterTodosBySearchQuery(todos, searchQuery);\n          break;\n      }\n    }\n\n    setFilteredTodos(filtered);\n  }, [todos, filter, searchQuery]);\n\n  const handleFilterChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    setFilter(e.target.value);\n  };\n\n  const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchQuery(e.target.value);\n  };\n\n  const handleClearSearch = () => {\n    setSearchQuery('');\n  };\n\n  const handleShowModal = (todo: Todo) => {\n    setSelectedTodo(todo);\n  };\n\n  const handleCloseModal = () => {\n    setSelectedTodo(null);\n  };\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                filter={filter}\n                onFilterChange={handleFilterChange}\n                searchQuery={searchQuery}\n                onSearchChange={handleSearchChange}\n                onClearSearch={handleClearSearch}\n              />\n            </div>\n\n            <div className=\"block\">\n              {loading ? <Loader /> : (\n                <TodoList\n                  todos={filteredTodos}\n                  onShowModal={handleShowModal}\n                  selectedTodoId={selectedTodo?.id}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo\n    && (\n      <TodoModal\n        todo={selectedTodo}\n        onCloseModal={handleCloseModal}\n      />\n    )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}